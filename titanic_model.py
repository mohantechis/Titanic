# -*- coding: utf-8 -*-
"""Titanic_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z0-EeYG_0_YHWJkvqU3SDl3Xx5p-eFuc
"""

#importing Data analysis Module
import pandas as pd
import numpy as np

#importing Visualization Model
import matplotlib.pyplot as plt

"""Loading The Datasets"""

df_train=pd.read_csv("/content/drive/MyDrive/Dataset/Titanic/train.csv")
df_test=pd.read_csv("/content/drive/MyDrive/Dataset/Titanic/test.csv")

#Checking Head of Data
df_train.head()

#Checking Tail of Data
df_train.tail()





df_train.dtypes

"""It is clear From Above that Which features having Object Datatype Value or which are Numerical data type Value

Object : Name,Sex,Ticket,Embarked ,Cabin

Numerical :PassengerId,Survived,Pclass,Age,SibSp,Parch,Fare
"""

df_train.isnull().sum()

"""Feature **Cabin,Age,Embarked**has Null or Empty Value
 


"""

df_train.describe().T

#Checking Info of Datasets
df_train.info()

"""*   Name are Unique Across the Dataset ( Total 891 Values)

Cabin feature may be dropped as it is highly incomplete or contains many null values

PassengerId may be dropped from training dataset as it does not contribute to survival.

Name feature is relatively non-standard, may not contribute directly to survival, so maybe dropped
"""

df_train.head()

df_train.drop(['Cabin','Ticket','PassengerId','Name'],axis=1,inplace=True)
df_test.drop(['Cabin','Ticket','PassengerId','Name'],axis=1,inplace=True)

df_train[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False)

df_train[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False)

df_train[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(by='Survived',ascending=False)

df_train[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by='Survived',ascending=False)

df_train.info()

df_train["Embarked"].describe()

df_train.Embarked.fillna("S",inplace=True)

"""Age Column"""

df_train['Age']=df_train["Age"].fillna(np.mean(df_train['Age']))
df_test['Age']=df_test["Age"].fillna(np.mean(df_test['Age']))

df_train.info()

print(" Training Dataset",df_train.shape)
print(" Testing Dataset",df_test.shape)

df_train['Sex']=df_train['Sex'].replace({'female':1,'male':0})
df_test['Sex']=df_test['Sex'].replace({'female':1,'male':0})

df_train['Embarked']=df_train['Embarked'].replace({"S":0,"C":1,"Q":2})
df_test['Embarked']=df_test['Embarked'].replace({"S":0,"C":1,"Q":2})

df_test['Fare']=df_test["Fare"].fillna(np.mean(df_train['Fare']))

df_test.info()

df_train.dtypes

df_test.isnull().sum()

X_train=df_train.drop("Survived",axis=1)
y_train=df_train["Survived"]
X_test=df_test

"""Model Fitting

Logistic Regression
"""

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
acc_log=round(model.score(X_train,y_train)*100,2)
print("Accuracy: ",acc_log)

"""KNN"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train,y_train)
y_pred=knn.predict(X_test)
acc_knn=round(knn.score(X_train,y_train)*100,2)
print("KNN:-",acc_knn)

"""Gaussian Naive Bayes"""

from sklearn.naive_bayes import GaussianNB

gaussian=GaussianNB()
gaussian.fit(X_train,y_train)
y_pred=gaussian.predict(X_test)
acc_nb=round(gaussian.score(X_train,y_train)*100,2)
print("Gaussian:-",acc_nb)

"""Decision Tree

"""

from sklearn.tree import DecisionTreeClassifier

dt=DecisionTreeClassifier()
dt.fit(X_train,y_train)
y_pred=dt.predict(X_test)
acc_dt=round(dt.score(X_train,y_train)*100,2)
print("Decision Tree:-",acc_dt)

"""Random Forest"""

from sklearn.ensemble import RandomForestClassifier

rf=RandomForestClassifier()
rf.fit(X_train,y_train)
y_pred=rf.predict(X_test)
acc_rf=round(rf.score(X_train,y_train)*100,2)
print("Random Forest :-",acc_rf)

models=pd.DataFrame({'Model':['Logistic Regression','Naive Bayes','KNN','Decision Tree','Random Forest'],
                     'Score':[acc_log,acc_nb,acc_knn,acc_dt,acc_rf]})
models.sort_values(by='Score',ascending=False)